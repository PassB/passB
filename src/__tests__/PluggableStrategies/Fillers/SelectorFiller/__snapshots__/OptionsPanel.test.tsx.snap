// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SelectorFiller OptionsPanel rendering completely different options renders 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <OptionsPanelComponent
    classes={
      Object {
        "topPadding": "OptionsPanelComponent-topPadding-1",
      }
    }
    options={
      Immutable.Map {
        "defaultUsernameSelector": "",
        "defaultPasswordSelector": "",
        "fillOnlyFirstMatchingField": false,
        "usernameSelectorPrefix": "#user",
        "passwordSelectorPrefix": "#pass",
      }
    }
    updateOptions={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": null,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <TextField
          error={false}
          helperText="Leave empty to only fill if there's a selector specified in the pass file"
          id="defaultUsernameSelector"
          label="Default username input css selector"
          margin="normal"
          onChange={[Function]}
          required={false}
          select={false}
          value=""
        />,
        <TextField
          error={false}
          helperText="Leave empty to only fill if there's a selector specified in the pass file"
          id="defaultPasswordSelector"
          label="Default password input css selector"
          margin="normal"
          onChange={[Function]}
          required={false}
          select={false}
          value=""
        />,
        <withStyles(FormControlLabel)
          control={
            <withStyles(Checkbox)
              checked={false}
              onChange={[Function]}
            />
          }
          id="fillOnlyFirstMatchingField"
          label="Fill only the first matching input field"
        />,
        <withStyles(Typography)
          className="OptionsPanelComponent-topPadding-1"
          gutterBottom={true}
          type="title"
        >
          Selectors from pass file
        </withStyles(Typography)>,
        <withStyles(Typography)
          type="subheading"
        >
          If the pass file contains a line starting with one of these prefixes, that selector will be used instead.
        </withStyles(Typography)>,
        <TextField
          id="usernameSelectorPrefix"
          label="username selector prefix"
          margin="normal"
          onChange={[Function]}
          required={false}
          select={false}
          value="#user"
        />,
        <TextField
          id="passwordSelectorPrefix"
          label="password selector prefix"
          margin="normal"
          onChange={[Function]}
          required={false}
          select={false}
          value="#pass"
        />,
      ],
      "fullWidth": true,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": null,
        "nodeType": "function",
        "props": Object {
          "error": false,
          "helperText": "Leave empty to only fill if there's a selector specified in the pass file",
          "id": "defaultUsernameSelector",
          "label": "Default username input css selector",
          "margin": "normal",
          "onChange": [Function],
          "required": false,
          "select": false,
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": null,
        "nodeType": "function",
        "props": Object {
          "error": false,
          "helperText": "Leave empty to only fill if there's a selector specified in the pass file",
          "id": "defaultPasswordSelector",
          "label": "Default password input css selector",
          "margin": "normal",
          "onChange": [Function],
          "required": false,
          "select": false,
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": null,
        "nodeType": "class",
        "props": Object {
          "control": <withStyles(Checkbox)
            checked={false}
            onChange={[Function]}
          />,
          "id": "fillOnlyFirstMatchingField",
          "label": "Fill only the first matching input field",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": null,
        "nodeType": "class",
        "props": Object {
          "children": "Selectors from pass file",
          "className": "OptionsPanelComponent-topPadding-1",
          "gutterBottom": true,
          "type": "title",
        },
        "ref": null,
        "rendered": "Selectors from pass file",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": null,
        "nodeType": "class",
        "props": Object {
          "children": "If the pass file contains a line starting with one of these prefixes, that selector will be used instead.",
          "type": "subheading",
        },
        "ref": null,
        "rendered": "If the pass file contains a line starting with one of these prefixes, that selector will be used instead.",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": null,
        "nodeType": "function",
        "props": Object {
          "id": "usernameSelectorPrefix",
          "label": "username selector prefix",
          "margin": "normal",
          "onChange": [Function],
          "required": false,
          "select": false,
          "value": "#user",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": null,
        "nodeType": "function",
        "props": Object {
          "id": "passwordSelectorPrefix",
          "label": "password selector prefix",
          "margin": "normal",
          "onChange": [Function],
          "required": false,
          "select": false,
          "value": "#pass",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": null,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <TextField
            error={false}
            helperText="Leave empty to only fill if there's a selector specified in the pass file"
            id="defaultUsernameSelector"
            label="Default username input css selector"
            margin="normal"
            onChange={[Function]}
            required={false}
            select={false}
            value=""
          />,
          <TextField
            error={false}
            helperText="Leave empty to only fill if there's a selector specified in the pass file"
            id="defaultPasswordSelector"
            label="Default password input css selector"
            margin="normal"
            onChange={[Function]}
            required={false}
            select={false}
            value=""
          />,
          <withStyles(FormControlLabel)
            control={
              <withStyles(Checkbox)
                checked={false}
                onChange={[Function]}
              />
            }
            id="fillOnlyFirstMatchingField"
            label="Fill only the first matching input field"
          />,
          <withStyles(Typography)
            className="OptionsPanelComponent-topPadding-1"
            gutterBottom={true}
            type="title"
          >
            Selectors from pass file
          </withStyles(Typography)>,
          <withStyles(Typography)
            type="subheading"
          >
            If the pass file contains a line starting with one of these prefixes, that selector will be used instead.
          </withStyles(Typography)>,
          <TextField
            id="usernameSelectorPrefix"
            label="username selector prefix"
            margin="normal"
            onChange={[Function]}
            required={false}
            select={false}
            value="#user"
          />,
          <TextField
            id="passwordSelectorPrefix"
            label="password selector prefix"
            margin="normal"
            onChange={[Function]}
            required={false}
            select={false}
            value="#pass"
          />,
        ],
        "fullWidth": true,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": null,
          "nodeType": "function",
          "props": Object {
            "error": false,
            "helperText": "Leave empty to only fill if there's a selector specified in the pass file",
            "id": "defaultUsernameSelector",
            "label": "Default username input css selector",
            "margin": "normal",
            "onChange": [Function],
            "required": false,
            "select": false,
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "function",
          "props": Object {
            "error": false,
            "helperText": "Leave empty to only fill if there's a selector specified in the pass file",
            "id": "defaultPasswordSelector",
            "label": "Default password input css selector",
            "margin": "normal",
            "onChange": [Function],
            "required": false,
            "select": false,
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "class",
          "props": Object {
            "control": <withStyles(Checkbox)
              checked={false}
              onChange={[Function]}
            />,
            "id": "fillOnlyFirstMatchingField",
            "label": "Fill only the first matching input field",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "class",
          "props": Object {
            "children": "Selectors from pass file",
            "className": "OptionsPanelComponent-topPadding-1",
            "gutterBottom": true,
            "type": "title",
          },
          "ref": null,
          "rendered": "Selectors from pass file",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "class",
          "props": Object {
            "children": "If the pass file contains a line starting with one of these prefixes, that selector will be used instead.",
            "type": "subheading",
          },
          "ref": null,
          "rendered": "If the pass file contains a line starting with one of these prefixes, that selector will be used instead.",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "function",
          "props": Object {
            "id": "usernameSelectorPrefix",
            "label": "username selector prefix",
            "margin": "normal",
            "onChange": [Function],
            "required": false,
            "select": false,
            "value": "#user",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "function",
          "props": Object {
            "id": "passwordSelectorPrefix",
            "label": "password selector prefix",
            "margin": "normal",
            "onChange": [Function],
            "required": false,
            "select": false,
            "value": "#pass",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`SelectorFiller OptionsPanel rendering default values renders 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <OptionsPanelComponent
    classes={
      Object {
        "topPadding": "OptionsPanelComponent-topPadding-1",
      }
    }
    options={
      Immutable.Map {
        "defaultUsernameSelector": "input[autocomplete=\\"username\\"],input[type=\\"email\\"]",
        "defaultPasswordSelector": "input[type=\\"password\\"]",
        "fillOnlyFirstMatchingField": true,
        "usernameSelectorPrefix": "",
        "passwordSelectorPrefix": "",
      }
    }
    updateOptions={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": null,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <TextField
          error={false}
          helperText="Leave empty to only fill if there's a selector specified in the pass file"
          id="defaultUsernameSelector"
          label="Default username input css selector"
          margin="normal"
          onChange={[Function]}
          required={false}
          select={false}
          value="input[autocomplete=\\"username\\"],input[type=\\"email\\"]"
        />,
        <TextField
          error={false}
          helperText="Leave empty to only fill if there's a selector specified in the pass file"
          id="defaultPasswordSelector"
          label="Default password input css selector"
          margin="normal"
          onChange={[Function]}
          required={false}
          select={false}
          value="input[type=\\"password\\"]"
        />,
        <withStyles(FormControlLabel)
          control={
            <withStyles(Checkbox)
              checked={true}
              onChange={[Function]}
            />
          }
          id="fillOnlyFirstMatchingField"
          label="Fill only the first matching input field"
        />,
        <withStyles(Typography)
          className="OptionsPanelComponent-topPadding-1"
          gutterBottom={true}
          type="title"
        >
          Selectors from pass file
        </withStyles(Typography)>,
        <withStyles(Typography)
          type="subheading"
        >
          If the pass file contains a line starting with one of these prefixes, that selector will be used instead.
        </withStyles(Typography)>,
        <TextField
          id="usernameSelectorPrefix"
          label="username selector prefix"
          margin="normal"
          onChange={[Function]}
          required={false}
          select={false}
          value=""
        />,
        <TextField
          id="passwordSelectorPrefix"
          label="password selector prefix"
          margin="normal"
          onChange={[Function]}
          required={false}
          select={false}
          value=""
        />,
      ],
      "fullWidth": true,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": null,
        "nodeType": "function",
        "props": Object {
          "error": false,
          "helperText": "Leave empty to only fill if there's a selector specified in the pass file",
          "id": "defaultUsernameSelector",
          "label": "Default username input css selector",
          "margin": "normal",
          "onChange": [Function],
          "required": false,
          "select": false,
          "value": "input[autocomplete=\\"username\\"],input[type=\\"email\\"]",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": null,
        "nodeType": "function",
        "props": Object {
          "error": false,
          "helperText": "Leave empty to only fill if there's a selector specified in the pass file",
          "id": "defaultPasswordSelector",
          "label": "Default password input css selector",
          "margin": "normal",
          "onChange": [Function],
          "required": false,
          "select": false,
          "value": "input[type=\\"password\\"]",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": null,
        "nodeType": "class",
        "props": Object {
          "control": <withStyles(Checkbox)
            checked={true}
            onChange={[Function]}
          />,
          "id": "fillOnlyFirstMatchingField",
          "label": "Fill only the first matching input field",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": null,
        "nodeType": "class",
        "props": Object {
          "children": "Selectors from pass file",
          "className": "OptionsPanelComponent-topPadding-1",
          "gutterBottom": true,
          "type": "title",
        },
        "ref": null,
        "rendered": "Selectors from pass file",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": null,
        "nodeType": "class",
        "props": Object {
          "children": "If the pass file contains a line starting with one of these prefixes, that selector will be used instead.",
          "type": "subheading",
        },
        "ref": null,
        "rendered": "If the pass file contains a line starting with one of these prefixes, that selector will be used instead.",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": null,
        "nodeType": "function",
        "props": Object {
          "id": "usernameSelectorPrefix",
          "label": "username selector prefix",
          "margin": "normal",
          "onChange": [Function],
          "required": false,
          "select": false,
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": null,
        "nodeType": "function",
        "props": Object {
          "id": "passwordSelectorPrefix",
          "label": "password selector prefix",
          "margin": "normal",
          "onChange": [Function],
          "required": false,
          "select": false,
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": null,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <TextField
            error={false}
            helperText="Leave empty to only fill if there's a selector specified in the pass file"
            id="defaultUsernameSelector"
            label="Default username input css selector"
            margin="normal"
            onChange={[Function]}
            required={false}
            select={false}
            value="input[autocomplete=\\"username\\"],input[type=\\"email\\"]"
          />,
          <TextField
            error={false}
            helperText="Leave empty to only fill if there's a selector specified in the pass file"
            id="defaultPasswordSelector"
            label="Default password input css selector"
            margin="normal"
            onChange={[Function]}
            required={false}
            select={false}
            value="input[type=\\"password\\"]"
          />,
          <withStyles(FormControlLabel)
            control={
              <withStyles(Checkbox)
                checked={true}
                onChange={[Function]}
              />
            }
            id="fillOnlyFirstMatchingField"
            label="Fill only the first matching input field"
          />,
          <withStyles(Typography)
            className="OptionsPanelComponent-topPadding-1"
            gutterBottom={true}
            type="title"
          >
            Selectors from pass file
          </withStyles(Typography)>,
          <withStyles(Typography)
            type="subheading"
          >
            If the pass file contains a line starting with one of these prefixes, that selector will be used instead.
          </withStyles(Typography)>,
          <TextField
            id="usernameSelectorPrefix"
            label="username selector prefix"
            margin="normal"
            onChange={[Function]}
            required={false}
            select={false}
            value=""
          />,
          <TextField
            id="passwordSelectorPrefix"
            label="password selector prefix"
            margin="normal"
            onChange={[Function]}
            required={false}
            select={false}
            value=""
          />,
        ],
        "fullWidth": true,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": null,
          "nodeType": "function",
          "props": Object {
            "error": false,
            "helperText": "Leave empty to only fill if there's a selector specified in the pass file",
            "id": "defaultUsernameSelector",
            "label": "Default username input css selector",
            "margin": "normal",
            "onChange": [Function],
            "required": false,
            "select": false,
            "value": "input[autocomplete=\\"username\\"],input[type=\\"email\\"]",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "function",
          "props": Object {
            "error": false,
            "helperText": "Leave empty to only fill if there's a selector specified in the pass file",
            "id": "defaultPasswordSelector",
            "label": "Default password input css selector",
            "margin": "normal",
            "onChange": [Function],
            "required": false,
            "select": false,
            "value": "input[type=\\"password\\"]",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "class",
          "props": Object {
            "control": <withStyles(Checkbox)
              checked={true}
              onChange={[Function]}
            />,
            "id": "fillOnlyFirstMatchingField",
            "label": "Fill only the first matching input field",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "class",
          "props": Object {
            "children": "Selectors from pass file",
            "className": "OptionsPanelComponent-topPadding-1",
            "gutterBottom": true,
            "type": "title",
          },
          "ref": null,
          "rendered": "Selectors from pass file",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "class",
          "props": Object {
            "children": "If the pass file contains a line starting with one of these prefixes, that selector will be used instead.",
            "type": "subheading",
          },
          "ref": null,
          "rendered": "If the pass file contains a line starting with one of these prefixes, that selector will be used instead.",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "function",
          "props": Object {
            "id": "usernameSelectorPrefix",
            "label": "username selector prefix",
            "margin": "normal",
            "onChange": [Function],
            "required": false,
            "select": false,
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "function",
          "props": Object {
            "id": "passwordSelectorPrefix",
            "label": "password selector prefix",
            "margin": "normal",
            "onChange": [Function],
            "required": false,
            "select": false,
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
